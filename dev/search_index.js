var documenterSearchIndex = {"docs":
[{"location":"supernodal_matrix/#SupernodalMatrix-API","page":"SupernodalMatrix","title":"SupernodalMatrix API","text":"","category":"section"},{"location":"supernodal_matrix/","page":"SupernodalMatrix","title":"SupernodalMatrix","text":"For supernodal Cholesky factorizations, SupernodalMatrix stores the output of selinv. This subtype of AbstractMatrix allows for a more efficient memory access tailored to supernodal representations.","category":"page"},{"location":"supernodal_matrix/","page":"SupernodalMatrix","title":"SupernodalMatrix","text":"While you can just use it like a regular AbstractMatrix (i.e. you can get its size and index into it as you would expect), you might be interested in more specialized methods.","category":"page"},{"location":"supernodal_matrix/#Fields-and-construction","page":"SupernodalMatrix","title":"Fields and construction","text":"","category":"section"},{"location":"supernodal_matrix/","page":"SupernodalMatrix","title":"SupernodalMatrix","text":"SupernodalMatrix\nSupernodalMatrix(F::SparseArrays.CHOLMOD.Factor; kwargs...)","category":"page"},{"location":"supernodal_matrix/#SelectedInversion.SupernodalMatrix","page":"SupernodalMatrix","title":"SelectedInversion.SupernodalMatrix","text":"SupernodalMatrix\n\nRepresents a sparse block lower triangular matrix with a supernodal layout. A supernode is a set of contiguous columns with identical sparsity pattern below the triangular block at the top. For each supernode, the corresponding nonzero entries are stored in a dense chunk. This enables us to use BLAS for operations on these chunks, so we combine the strengths of sparse and dense matrices.\n\nFields\n\nN::Int: Number of rows\nM::Int: Number of columns\nn_super::Int: Number of supernodes\nsuper_to_col::Vector{Int}: Start/end column of each supernode.                              Length n_super + 1.\ncol_to_super::Vector{Int}: Maps each column to its supernode index.                              Length M.\nsuper_to_vals::Vector{Int}: Start/end indices of each supernode into vals.                               Length n_super + 1.\nsuper_to_rows::Vector{Int}: Start/end indices of each supernode into rows.                               Length n_super + 1.\nvals::Vector{Float64}: Nonzero values.\nrows::Vector{Int}: Row indices. CAREFUL: These are zero-indexed!\nmax_super_rows::Int: Maximum number of rows below the triangular block in a                        supernode chunk.\ntransposed_chunks::Bool: Whether to store the transpose of chunks, such that                            the first axis in the chunk corresponds to the                            columns in the supernode.\nsymmetric_access::Bool: Whether to enforce symmetry when accessing entries.\ninvperm::Vector{Int}: Permutation to apply before accessing entries                         when depermuted_access == true.\ndepermuted_access::Bool: Whether to apply an inverse permutation before                            accessing entries.\n\n\n\n\n\n","category":"type"},{"location":"supernodal_matrix/#SelectedInversion.SupernodalMatrix-Tuple{SparseArrays.CHOLMOD.Factor}","page":"SupernodalMatrix","title":"SelectedInversion.SupernodalMatrix","text":"SupernodalMatrix(\n    F::SparseArrays.CHOLMOD.Factor;\n    transpose_chunks = false,\n    symmetric_access = false,\n    depermuted_access = false,\n)\n\nConstruct a SupernodalMatrix from a supernodal Cholesky factorization.\n\nKeyword arguments are explained in the SupernodalMatrix docstring.\n\n\n\n\n\n","category":"method"},{"location":"supernodal_matrix/#Methods","page":"SupernodalMatrix","title":"Methods","text":"","category":"section"},{"location":"supernodal_matrix/","page":"SupernodalMatrix","title":"SupernodalMatrix","text":"val_range\ncol_range\nget_rows\nget_row_col_idcs\nget_max_sup_size","category":"page"},{"location":"supernodal_matrix/#SelectedInversion.val_range","page":"SupernodalMatrix","title":"SelectedInversion.val_range","text":"val_range(S::SupernodalMatrix, sup_idx::Int)\n\nGet the range of indices of supernode sup_idx into S.vals.\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/#SelectedInversion.col_range","page":"SupernodalMatrix","title":"SelectedInversion.col_range","text":"col_range(S::SupernodalMatrix, sup_idx::Int)\n\nGet the range of columns of supernode sup_idx.\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/#SelectedInversion.get_rows","page":"SupernodalMatrix","title":"SelectedInversion.get_rows","text":"get_rows(S::SupernodalMatrix, sup_idx::Int)\n\nGet the row indices corresponding to supernode sup_idx. CAREFUL: These are zero-indexed!\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/#SelectedInversion.get_row_col_idcs","page":"SupernodalMatrix","title":"SelectedInversion.get_row_col_idcs","text":"get_row_col_idcs(S::SupernodalMatrix, sup_idx::Int)\n\nGet the row and column indices corresponding to supernode sup_idx. Both sets of indices are one-indexed.\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/#SelectedInversion.get_max_sup_size","page":"SupernodalMatrix","title":"SelectedInversion.get_max_sup_size","text":"get_max_sup_size(S::SupernodalMatrix)\n\nGet the maximum number of columns of any supernode.\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/","page":"SupernodalMatrix","title":"SupernodalMatrix","text":"get_Sj\npartition_Sj","category":"page"},{"location":"supernodal_matrix/#SelectedInversion.get_Sj","page":"SupernodalMatrix","title":"SelectedInversion.get_Sj","text":"get_Sj(S::SupernodalMatrix, sup_idx::Int)\n\nGet the row indices below the triangular block of supernode sup_idx. CAREFUL: These are zero-indexed!\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/#SelectedInversion.partition_Sj","page":"SupernodalMatrix","title":"SelectedInversion.partition_Sj","text":"partition_Sj(S::SupernodalMatrix, Sj)\n\nPartition the output of get_Sj into contiguous subsets where each subset is fully contained in one supernode.\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/","page":"SupernodalMatrix","title":"SupernodalMatrix","text":"get_chunk\nget_split_chunk","category":"page"},{"location":"supernodal_matrix/#SelectedInversion.get_chunk","page":"SupernodalMatrix","title":"SelectedInversion.get_chunk","text":"get_chunk(S::SupernodalMatrix, sup_idx::Int)\n\nGet the dense chunk corresponding to supernode sup_idx. Includes the triangular block at the top.\n\n\n\n\n\n","category":"function"},{"location":"supernodal_matrix/#SelectedInversion.get_split_chunk","page":"SupernodalMatrix","title":"SelectedInversion.get_split_chunk","text":"get_split_chunk(S::SupernodalMatrix, sup_idx::Int)\n\nGet the chunk corresponding to supernode sup_idx, split into the diagonal / lower triangular block at the top, and the remaining block below it.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SelectedInversion","category":"page"},{"location":"#SelectedInversion","page":"Home","title":"SelectedInversion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Quickly compute selected entries of the inverse of a sparse matrix.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sparse matrices are one of the pillars of scientific computing. Sparse factorization methods allow us to solve linear systems involving the inverse efficiently. But in some applications, we might need a bunch of entries of the inverse. Selected inversion algorithms efficiently compute those entries of the inverse that correspond to non-zero entries in the factorization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SelectedInversion.jl directly interfaces with CHOLMOD-based Cholesky factorizations, which are the default for sparse symmetric positive-definite matrices in Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SelectedInversion.jl is not yet a registered Julia package. Until it is, you can install it from this GitHub repository. To do so:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download Julia (>= version 1.10).\nLaunch the Julia REPL and type ] add https://github.com/timweiland/SelectedInversion.jl. ","category":"page"},{"location":"#SelInv-API","page":"Home","title":"SelInv API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For a concrete usage tutorial, check ...","category":"page"},{"location":"","page":"Home","title":"Home","text":"selinv","category":"page"},{"location":"#SelectedInversion.selinv","page":"Home","title":"SelectedInversion.selinv","text":"selinv(A::SparseMatrixCSC; depermute=false)\n    -> @NamedTuple{Z::AbstractMatrix, p::Vector{Int64}}\n\nCompute the selected inverse Z of A. The sparsity pattern of Z corresponds to that of the Cholesky factor of A, and the nonzero entries of Z match the corresponding entries in A⁻¹.\n\nArguments\n\nA::SparseMatrixCSC: The sparse symmetric positive definite matrix for which                       the selected inverse will be computed.\n\nKeyword arguments\n\ndepermute::Bool: Whether to depermute the selected inverse or not.\n\nReturns\n\nA named tuple Zp. Zp.Z is the selected inverse, and Zp.p is the permutation vector of the corresponding sparse Cholesky factorization.\n\n\n\n\n\nselinv(F::SparseArrays.CHOLMOD.Factor; depermute=false)\n    -> @NamedTuple{Z::AbstractMatrix, p::Vector{Int64}}\n\nCompute the selected inverse Z of some matrix A based on its sparse Cholesky factorization F.\n\nArguments\n\nF::SparseArrays.CHOLMOD.Factor:       Sparse Cholesky factorization of some matrix A.       F will be used internally for the computations underlying the       selected inversion of A.\n\nKeyword arguments\n\ndepermute::Bool: Whether to depermute the selected inverse or not.\n\nReturns\n\nA named tuple Zp. Zp.Z is the selected inverse, and Zp.p is the permutation vector of the corresponding sparse Cholesky factorization.\n\n\n\n\n\n","category":"function"}]
}
